/*
Physically Based Rendering is all about simulating light interactions with surfaces in much more realistic and physical based way 
taking surface structure and energy conservation law into consideration by calculating the emissive and reflectance part for a surface.

This calculation is based on what's called Rendering Equation, which calculates how much light energy at a given point in space :
1) Irradiance : how much flux of all the incoming and reflected light waves at a certain area (reflectance = diffuse + specular)
2) Emission : how much energy the body emits, in case of the surface is emissive which is not in our cases (emission)

Usually in our case, we work on a simplified eqn of the Rendering eqn which ignores the emission part, we call it Reflectance eqn
that's all about how many lighting rays hitting a certain point on a surface to calculate how bright it is, but with taking the surface micro-structure into consideration.

Phong is a much simplified eqn of the relectance eqn but not considering the surface micro-structure and not physically based 
as it doesn't care about the energy conservation law (reflectance and refraction).

Many of the following functions is used to determine what is known as a bidirectional reflective distribution function (BRDF)
which is a major part of the specualr part of the reflectance eqn, how surface structure and light rays interacts with the surface.

Lighting can happen using two techniques : 
1) Direct source lights
2) Image Based Lighting (IBL) which is an indirect surrounding enviroment lights

In a realistic rendering we must use the second, so for each part of the integral eqn, the diffuse and specular parts, 
there's precomputed enviroment maps that corresponds to each which we use in sampling to get a Physically Based Rendering.

To understand the precomputed enviroment maps, read the comments section in the PBR renderer explaining each.
*/

#version 400 core
#extension GL_ARB_shading_language_420pack : require

uniform vec3 object_color_albedo;
uniform vec3 light_color;
uniform vec3 light_dir;
uniform vec3 camera_pos_world;
uniform float metallic;
uniform float rough;
uniform samplerCube diffuse_irradiance_map;
uniform samplerCube specular_prefiltered_map;
uniform sampler2D specular_BRDF_LUT;

in vec3 pos_world;
in vec3 normal_world;

out vec4 frag_color;

const float PI = 3.14159265359f;

/*
1) Normal Distribution Function that shows how many of the microfaces of the object is aligned to the halfway vector.
this contributes in the shinning and specular part, we use Trowbridge-Reitz GGX method
*/
float
NDF_GGX(vec3 normal, vec3 halfway, float roughness)
{
	float r = roughness*roughness;
	float r2 = r*r;
	float dot = max(dot(normal, halfway), 0.0);
	float dot2 = dot*dot;
	float nom   = r2; 
	float denom = (dot2 * (r2 - 1.0) + 1.0);
	denom = PI * denom * denom;
	return nom / max(denom, 0.001); //in case of zero denom
}

/*
2) Geometry Function used to approximate microfaces geomtery and their interactions with light dir and view dir
geometry shadowing with light dir through the microfaces + geometry obstruction with view dir which is blocking the reflected light dir from viewer
contributes in the shadowing through the surface, we use Smith's method
*/

float
_GGX_Direct(float roughness)
{
	return (roughness + 1.0) * (roughness + 1.0) / 8.0;
}

float
_Geomtery_Schlick_GGX(float dot, float k)
{
	float nom   = dot;
	float denom = dot * (1.0 - k) + k;
	return nom / denom;
}

float
Geometry_Smith(vec3 normal, vec3 view_dir, vec3 light_dir, float roughness, float k)
{
	float nv = max(dot(normal, view_dir), 0.0);
	float nl = max(dot(normal, light_dir), 0.0);
	float ggx1 = _Geomtery_Schlick_GGX(nv, k);
	float ggx2 = _Geomtery_Schlick_GGX(nl, k);
	return ggx1 * ggx2;
}

/*
3) Fresnel Function calculates how reflective the surface is which is the ratio of the reflections to the refractions
according to the viewer angle, we use Fresnel-Schlick method. (google Fresnel effect and check any image), F0 is the base reflectivity.
*/

vec3
Fresnel_Schlick(float halfway_view_dot, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - halfway_view_dot, 5.0);
}

vec3
Fresnel_Schlick_Roughness(float cos_theta, vec3 F0)
{
    return F0 + (max(vec3(1.0 - rough), F0) - F0) * pow(1.0 - cos_theta, 5.0);
}

//Cook-Torrance BRDF
vec3
Direct_Light_BRDF(vec3 normal, vec3 light_dir, vec3 view_dir, float roughness)
{
	//NDF
	vec3 halfway = normalize(view_dir + light_dir);
	float D = NDF_GGX(normal, halfway, roughness);

	//Fresnel, calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)
	vec3 F0 = vec3(0.04); 
    F0 = mix(F0, object_color_albedo, metallic);
	vec3 F = Fresnel_Schlick(clamp(dot(halfway, view_dir), 0.0, 1.0), F0);

	//Geometry
	float G = Geometry_Smith(normal, view_dir, light_dir, roughness, _GGX_Direct(roughness));

	//specular
	vec3 nom = D * F * G;
	float deno = 4 * max(dot(normal, view_dir), 0.0) * max(dot(normal, light_dir), 0.0);
	vec3 specular = nom / max(deno, 0.001);

	//diffuse (taking metallic surfaces into consideration, metallic surfaces doesn't has diffuse part as it reflects all the light)
	vec3 kD = (vec3(1.0) - F) * (1.0 - metallic); 
	vec3 diffuse = (kD * object_color_albedo / PI);

	return (diffuse + specular);
}

void
main()
{
	//reflectance eqn (irradiance)
	vec3 view_dir = normalize(camera_pos_world - pos_world);
	float nl = max(dot(normal_world, -light_dir), 0.0);

	//calc diffuse and specular of direct lighting
	vec3 direct_light_irradiance = Direct_Light_BRDF(normal_world, -light_dir, view_dir, rough) * light_color * nl;

	//calc diffuse and specular of indirect enviroment lighting (IBL) 
	vec3 F0 = vec3(0.04);
	vec3 F = Fresnel_Schlick_Roughness(max(dot(normal_world, view_dir), 0.0), F0);
	vec3 kD = 1.0 - F;
	kD *= 1.0 - metallic;
	vec3 env_irradiance = texture(diffuse_irradiance_map, normal_world).rgb;
	vec3 diffuse = env_irradiance * object_color_albedo;
	vec3 IBL_irradiance = (kD * diffuse);
	
	vec3 R = reflect(-view_dir, normal_world); 
	const float MAX_REFLECTION_LOD = 4.0;
	vec3 prefiltered_color = textureLod(specular_prefiltered_map, R,  rough * MAX_REFLECTION_LOD).rgb;
	vec2 brdf  = texture(specular_BRDF_LUT, vec2(max(dot(normal_world, view_dir), 0.0), rough)).rg;
	vec3 specular = prefiltered_color * (F * brdf.x + brdf.y); //scaling and translation for the base reflectivity value (see the BRDF integration)

	//calc direct and indirect lighting irradiance
	vec3 color = (IBL_irradiance + direct_light_irradiance) + specular;
	
	//HDR tonemapping and gamma correction
	color = color / (color + vec3(1.0));
	color = pow(color, vec3(1.0/2.2));

	frag_color = vec4(color, 1.0);
}