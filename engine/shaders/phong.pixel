#version 400 core
#extension GL_ARB_shading_language_420pack : require

in vec3 frag_pos_world;
in vec3 normal_world;
out vec4 frag_color;

//lights
const int MAX_LIGHT_NUMBER = 10;

struct
Sun
{
	vec4 col;
	vec4 dir;
};

struct
Lamp
{
	vec4 col;
	vec4 pos;
	float cutoff_dist;
};

struct
Flash
{
	vec4 col;
	vec4 pos;
	vec4 dir;
	float cutoff_dist;
	float penumbera_cos; //cone angle
	float umbera_cos; //cutoff angle
};

struct
Lights_Count
{
	int suns_count;
	int lamps_count;
	int flashes_count;
};

//uniforms
layout (std140, binding = 1) uniform Object_Color
{
	vec4 object_color;
};

layout (std140, binding = 2) uniform Camera
{
	vec4 camera_pos;
};

layout (std140, binding = 3) uniform Lights_Count_
{
	Lights_Count lights;
};

layout (std140, binding = 4) uniform Directional_Lights
{
	Sun suns[MAX_LIGHT_NUMBER];
};

layout (std140, binding = 5) uniform Point_Lights
{
	Lamp lamps[MAX_LIGHT_NUMBER];
};

layout (std140, binding = 6) uniform Spot_Lights
{
	Flash flashes[MAX_LIGHT_NUMBER];
};

//calc diffuse and spec components
vec3
ds_calc(vec3 light_c, vec3 light_d, vec3 view_d, vec3 normal)
{
	//diffuse (scatterd light according to the material)
	vec3 diffuse = max(dot(normal, -light_d), 0.0f) * light_c;

	//specular (shinning)
	vec3 reflected_light = reflect(light_d, normal);
	vec3 specular = 0.5f * pow(max(dot(view_d, reflected_light), 0.0), 128) * light_c;

	return diffuse + specular;
};

vec3
directional_light_calc(Sun sun, vec3 normal)
{
	vec3 light_c = sun.col.xyz;
	vec3 light_d = sun.dir.xyz;
	vec3 view_d = normalize(camera_pos.xyz - frag_pos_world);
	vec3 result = ds_calc(light_c, light_d, view_d, normal);

	return result;
}

vec3
point_light_calc(Lamp lamp, vec3 normal)
{
	vec3 light_c = lamp.col.xyz;
	vec3 light_p = lamp.pos.xyz;
	vec3 light_d = normalize(frag_pos_world - light_p);
	vec3 view_d = normalize(camera_pos.xyz - frag_pos_world);
	vec3 result = ds_calc(light_c, light_d, view_d, normal);

	//we use a similar cutoff smooth attenuatuion fn as in unreal engine
	float d = length(frag_pos_world - light_p);
	float attenuation = clamp(1 - pow((d/lamp.cutoff_dist), 2) , 0, 1);

	return result * attenuation;
}

vec3
spot_light_calc(Flash flash, vec3 normal)
{
	vec3 light_c = flash.col.xyz;
	vec3 light_p = flash.pos.xyz;
	vec3 light_d = normalize(frag_pos_world - light_p);
	vec3 view_d = normalize(camera_pos.xyz - frag_pos_world);
	vec3 result = ds_calc(light_c, light_d, view_d, normal);

	//we use a similar cutoff smooth attenuatuion fn as in unreal engine
	float d = length(frag_pos_world - light_p);
	float attenuation = clamp(1 - pow((d/flash.cutoff_dist), 2) , 0, 1);

	//intensity according to the angle
	float theta_cos = dot(normalize(frag_pos_world - flash.pos.xyz), normalize(flash.dir.xyz));
	float intensity = clamp((theta_cos - flash.umbera_cos) / (flash.penumbera_cos - flash.umbera_cos), 0, 1);

	return result * attenuation * intensity;
}

//interpolation in the setup triangle phase while rasterization not necasserily gives you a normal with mag = 1
void
main()
{
	//ambient (distrubuted light over the space)
	vec3 result = vec3(0.1) * object_color.xyz;

	//directional lights
	for(int x = 0; x < lights.suns_count; ++x)
		result += directional_light_calc(suns[x], normalize(normal_world)) * object_color.xyz;

	//point lights
	for(int x = 0; x < lights.lamps_count; ++x)
		result += point_light_calc(lamps[x], normalize(normal_world)) * object_color.xyz;

	//spot lights
	for(int x = 0; x < lights.flashes_count; ++x)
		result += spot_light_calc(flashes[x], normalize(normal_world)) * object_color.xyz;

	frag_color = vec4(result, 1.0);
};