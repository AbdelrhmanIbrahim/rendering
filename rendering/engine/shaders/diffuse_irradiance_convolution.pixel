#version 330 core
out vec4 frag_color;
in vec3 world_pos;

uniform samplerCube environmentMap;

const float PI = 3.14159265359;

void main()
{
	// The world vector acts as the normal of a tangent surface
	// from the origin, aligned to world_pos. Given this normal, calculate all
	// incoming radiance of the environment. The result of this
	// is the irradiance of incoming light rays from normal direction, which is what
	// we use in the PBR shader to sample irradiance.
	vec3 N = normalize(world_pos);

	vec3 irradiance = vec3(0.0);

	// tangent space calculation from origin point
	vec3 up    = vec3(0.0, 1.0, 0.0);
	vec3 right = cross(up, N);
	up            = cross(N, right);

	float delta = 0.025;
	float samples = 0.0;
	for(float phi = 0.0; phi < 2.0 * PI; phi += delta)
	{
		for(float theta = 0.0; theta < 0.5 * PI; theta += delta)
		{
			// spherical to cartesian (in tangent space) to world
			vec3 tangent_local = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
			vec3 sample = tangent_local.x * right + tangent_local.y * up + tangent_local.z * N; 
			irradiance += texture(environmentMap, sample).rgb * cos(theta) * sin(theta);
			samples++;
		}
	}
	irradiance = PI * irradiance * (1.0 / float(samples));
	frag_color = vec4(irradiance, 1.0);
}