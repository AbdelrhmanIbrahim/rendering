/*
USAGE:
	This shader is used to generate the convoluted diffuse irradiance map from a given env map which is the soln of the diffuse integral of the reflectance equation,
	which is what we use in the PBR shader to sample the diffuse part of the rendering eqn integral.
	(if we don't have its diffuse blurred hdr map downloaded already for example)

HOW TO :
	To convolute and generate the diffuse irradiance map, we calc the irradiance and summation of all incoming light rays from the surronding enviroment
	through a hemisphere around the given normal at a certain point.
*/

#version 330 core
out vec4 frag_color;
in vec3 world_pos;

uniform samplerCube env_map;
const float PI = 3.14159265359;

void main()
{
	vec3 N = normalize(world_pos);
	vec3 irradiance = vec3(0.0);

	// tangent space calc from origin point
	vec3 up = vec3(0.0, 1.0, 0.0);
	vec3 right = cross(up, N);
	up = cross(N, right);

	float delta = 0.025;
	float samples = 0.0;
	for(float phi = 0.0; phi < 2.0 * PI; phi += delta)
	{
		for(float theta = 0.0; theta < 0.5 * PI; theta += delta)
		{
			// spherical to cartesian (in tangent space) to world
			vec3 tangent_local = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
			vec3 sample = tangent_local.x * right + tangent_local.y * up + tangent_local.z * N; 
			irradiance += texture(env_map, sample).rgb * cos(theta) * sin(theta);
			samples++;
		}
	}
	irradiance = PI * irradiance * (1.0 / float(samples));
	frag_color = vec4(irradiance, 1.0);
}